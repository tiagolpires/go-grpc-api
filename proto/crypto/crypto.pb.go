// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto/crypto.proto

package crypto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Crypto struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Votes                int64    `protobuf:"varint,3,opt,name=votes,proto3" json:"votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Crypto) Reset()         { *m = Crypto{} }
func (m *Crypto) String() string { return proto.CompactTextString(m) }
func (*Crypto) ProtoMessage()    {}
func (*Crypto) Descriptor() ([]byte, []int) {
	return fileDescriptor_27e1fe69dc202ca1, []int{0}
}

func (m *Crypto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Crypto.Unmarshal(m, b)
}
func (m *Crypto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Crypto.Marshal(b, m, deterministic)
}
func (m *Crypto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crypto.Merge(m, src)
}
func (m *Crypto) XXX_Size() int {
	return xxx_messageInfo_Crypto.Size(m)
}
func (m *Crypto) XXX_DiscardUnknown() {
	xxx_messageInfo_Crypto.DiscardUnknown(m)
}

var xxx_messageInfo_Crypto proto.InternalMessageInfo

func (m *Crypto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Crypto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Crypto) GetVotes() int64 {
	if m != nil {
		return m.Votes
	}
	return 0
}

type GetByIdRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByIdRequest) Reset()         { *m = GetByIdRequest{} }
func (m *GetByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetByIdRequest) ProtoMessage()    {}
func (*GetByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27e1fe69dc202ca1, []int{1}
}

func (m *GetByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByIdRequest.Unmarshal(m, b)
}
func (m *GetByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByIdRequest.Marshal(b, m, deterministic)
}
func (m *GetByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByIdRequest.Merge(m, src)
}
func (m *GetByIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetByIdRequest.Size(m)
}
func (m *GetByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByIdRequest proto.InternalMessageInfo

func (m *GetByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CryptoResponse struct {
	Crypto               *Crypto  `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptoResponse) Reset()         { *m = CryptoResponse{} }
func (m *CryptoResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoResponse) ProtoMessage()    {}
func (*CryptoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27e1fe69dc202ca1, []int{2}
}

func (m *CryptoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoResponse.Unmarshal(m, b)
}
func (m *CryptoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoResponse.Marshal(b, m, deterministic)
}
func (m *CryptoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoResponse.Merge(m, src)
}
func (m *CryptoResponse) XXX_Size() int {
	return xxx_messageInfo_CryptoResponse.Size(m)
}
func (m *CryptoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoResponse proto.InternalMessageInfo

func (m *CryptoResponse) GetCrypto() *Crypto {
	if m != nil {
		return m.Crypto
	}
	return nil
}

func (m *CryptoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Crypto)(nil), "Crypto")
	proto.RegisterType((*GetByIdRequest)(nil), "GetByIdRequest")
	proto.RegisterType((*CryptoResponse)(nil), "CryptoResponse")
}

func init() { proto.RegisterFile("crypto/crypto.proto", fileDescriptor_27e1fe69dc202ca1) }

var fileDescriptor_27e1fe69dc202ca1 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x31, 0x8f, 0x82, 0x40,
	0x10, 0x85, 0x03, 0xdc, 0x71, 0xb9, 0x31, 0x40, 0x32, 0x5a, 0x10, 0x1b, 0x09, 0x15, 0xd5, 0x1a,
	0xf1, 0x1f, 0x60, 0x41, 0x6c, 0xd7, 0x5f, 0xa0, 0x30, 0x05, 0x85, 0x2c, 0xee, 0xae, 0x24, 0xfc,
	0x7b, 0xc3, 0x0e, 0x0d, 0x56, 0x33, 0xef, 0xe5, 0x65, 0xbe, 0x37, 0xb0, 0x6d, 0xf4, 0x34, 0x58,
	0x75, 0xe4, 0x21, 0x06, 0xad, 0xac, 0xca, 0x2b, 0x08, 0x2f, 0x4e, 0x63, 0x0c, 0x7e, 0xd7, 0xa6,
	0x5e, 0xe6, 0x15, 0xff, 0xd2, 0xef, 0x5a, 0x44, 0xf8, 0xe9, 0xef, 0x4f, 0x4a, 0x7d, 0xe7, 0xb8,
	0x1d, 0x77, 0xf0, 0x3b, 0x2a, 0x4b, 0x26, 0x0d, 0x32, 0xaf, 0x08, 0x24, 0x8b, 0x3c, 0x83, 0xb8,
	0x26, 0x5b, 0x4d, 0xd7, 0x56, 0xd2, 0xeb, 0x4d, 0xc6, 0x7e, 0xdf, 0xca, 0x6b, 0x88, 0x99, 0x22,
	0xc9, 0x0c, 0xaa, 0x37, 0x84, 0x07, 0x08, 0xb9, 0x87, 0x4b, 0x6d, 0xca, 0x3f, 0xb1, 0x04, 0x16,
	0x7b, 0x46, 0x91, 0xd6, 0x4a, 0x2f, 0x7c, 0x16, 0x65, 0x05, 0x11, 0xe7, 0x6e, 0xa4, 0xc7, 0xae,
	0x21, 0x3c, 0x41, 0x54, 0x93, 0x65, 0x6f, 0x6e, 0x80, 0x89, 0x58, 0x77, 0xd9, 0x27, 0x62, 0x8d,
	0x7e, 0x84, 0xee, 0xf3, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x13, 0x02, 0xa6, 0x10, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CryptoServiceClient is the client API for CryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoServiceClient interface {
	GetCryptoById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CryptoResponse, error)
}

type cryptoServiceClient struct {
	cc *grpc.ClientConn
}

func NewCryptoServiceClient(cc *grpc.ClientConn) CryptoServiceClient {
	return &cryptoServiceClient{cc}
}

func (c *cryptoServiceClient) GetCryptoById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CryptoResponse, error) {
	out := new(CryptoResponse)
	err := c.cc.Invoke(ctx, "/CryptoService/GetCryptoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServiceServer is the server API for CryptoService service.
type CryptoServiceServer interface {
	GetCryptoById(context.Context, *GetByIdRequest) (*CryptoResponse, error)
}

// UnimplementedCryptoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCryptoServiceServer struct {
}

func (*UnimplementedCryptoServiceServer) GetCryptoById(ctx context.Context, req *GetByIdRequest) (*CryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoById not implemented")
}

func RegisterCryptoServiceServer(s *grpc.Server, srv CryptoServiceServer) {
	s.RegisterService(&_CryptoService_serviceDesc, srv)
}

func _CryptoService_GetCryptoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServiceServer).GetCryptoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoService/GetCryptoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServiceServer).GetCryptoById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CryptoService",
	HandlerType: (*CryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCryptoById",
			Handler:    _CryptoService_GetCryptoById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto/crypto.proto",
}
